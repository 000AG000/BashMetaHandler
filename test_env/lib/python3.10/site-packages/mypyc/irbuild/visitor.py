"""Dispatcher used when transforming a mypy AST to the IR form.

mypyc.irbuild.builder and mypyc.irbuild.main are closely related.
"""

from __future__ import annotations

from typing import NoReturn

from mypy.nodes import AssertStmt
from mypy.nodes import AssertTypeExpr
from mypy.nodes import AssignmentExpr
from mypy.nodes import AssignmentStmt
from mypy.nodes import AwaitExpr
from mypy.nodes import Block
from mypy.nodes import BreakStmt
from mypy.nodes import BytesExpr
from mypy.nodes import CallExpr
from mypy.nodes import CastExpr
from mypy.nodes import ClassDef
from mypy.nodes import ComparisonExpr
from mypy.nodes import ComplexExpr
from mypy.nodes import ConditionalExpr
from mypy.nodes import ContinueStmt
from mypy.nodes import Decorator
from mypy.nodes import DelStmt
from mypy.nodes import DictExpr
from mypy.nodes import DictionaryComprehension
from mypy.nodes import EllipsisExpr
from mypy.nodes import EnumCallExpr
from mypy.nodes import ExpressionStmt
from mypy.nodes import FloatExpr
from mypy.nodes import ForStmt
from mypy.nodes import FuncDef
from mypy.nodes import GeneratorExpr
from mypy.nodes import GlobalDecl
from mypy.nodes import IfStmt
from mypy.nodes import Import
from mypy.nodes import ImportAll
from mypy.nodes import ImportFrom
from mypy.nodes import IndexExpr
from mypy.nodes import IntExpr
from mypy.nodes import LambdaExpr
from mypy.nodes import ListComprehension
from mypy.nodes import ListExpr
from mypy.nodes import MatchStmt
from mypy.nodes import MemberExpr
from mypy.nodes import MypyFile
from mypy.nodes import NamedTupleExpr
from mypy.nodes import NameExpr
from mypy.nodes import NewTypeExpr
from mypy.nodes import NonlocalDecl
from mypy.nodes import OperatorAssignmentStmt
from mypy.nodes import OpExpr
from mypy.nodes import OverloadedFuncDef
from mypy.nodes import ParamSpecExpr
from mypy.nodes import PassStmt
from mypy.nodes import PromoteExpr
from mypy.nodes import RaiseStmt
from mypy.nodes import ReturnStmt
from mypy.nodes import RevealExpr
from mypy.nodes import SetComprehension
from mypy.nodes import SetExpr
from mypy.nodes import SliceExpr
from mypy.nodes import StarExpr
from mypy.nodes import StrExpr
from mypy.nodes import SuperExpr
from mypy.nodes import TempNode
from mypy.nodes import TryStmt
from mypy.nodes import TupleExpr
from mypy.nodes import TypeAliasExpr
from mypy.nodes import TypeApplication
from mypy.nodes import TypedDictExpr
from mypy.nodes import TypeVarExpr
from mypy.nodes import TypeVarTupleExpr
from mypy.nodes import UnaryExpr
from mypy.nodes import Var
from mypy.nodes import WhileStmt
from mypy.nodes import WithStmt
from mypy.nodes import YieldExpr
from mypy.nodes import YieldFromExpr
from mypyc.ir.ops import Value
from mypyc.irbuild.builder import IRBuilder
from mypyc.irbuild.builder import IRVisitor
from mypyc.irbuild.builder import UnsupportedException
from mypyc.irbuild.classdef import transform_class_def
from mypyc.irbuild.expression import transform_assignment_expr
from mypyc.irbuild.expression import transform_bytes_expr
from mypyc.irbuild.expression import transform_call_expr
from mypyc.irbuild.expression import transform_comparison_expr
from mypyc.irbuild.expression import transform_complex_expr
from mypyc.irbuild.expression import transform_conditional_expr
from mypyc.irbuild.expression import transform_dict_expr
from mypyc.irbuild.expression import transform_dictionary_comprehension
from mypyc.irbuild.expression import transform_ellipsis
from mypyc.irbuild.expression import transform_float_expr
from mypyc.irbuild.expression import transform_generator_expr
from mypyc.irbuild.expression import transform_index_expr
from mypyc.irbuild.expression import transform_int_expr
from mypyc.irbuild.expression import transform_list_comprehension
from mypyc.irbuild.expression import transform_list_expr
from mypyc.irbuild.expression import transform_member_expr
from mypyc.irbuild.expression import transform_name_expr
from mypyc.irbuild.expression import transform_op_expr
from mypyc.irbuild.expression import transform_set_comprehension
from mypyc.irbuild.expression import transform_set_expr
from mypyc.irbuild.expression import transform_slice_expr
from mypyc.irbuild.expression import transform_str_expr
from mypyc.irbuild.expression import transform_super_expr
from mypyc.irbuild.expression import transform_tuple_expr
from mypyc.irbuild.expression import transform_unary_expr
from mypyc.irbuild.function import transform_decorator
from mypyc.irbuild.function import transform_func_def
from mypyc.irbuild.function import transform_lambda_expr
from mypyc.irbuild.function import transform_overloaded_func_def
from mypyc.irbuild.statement import transform_assert_stmt
from mypyc.irbuild.statement import transform_assignment_stmt
from mypyc.irbuild.statement import transform_await_expr
from mypyc.irbuild.statement import transform_block
from mypyc.irbuild.statement import transform_break_stmt
from mypyc.irbuild.statement import transform_continue_stmt
from mypyc.irbuild.statement import transform_del_stmt
from mypyc.irbuild.statement import transform_expression_stmt
from mypyc.irbuild.statement import transform_for_stmt
from mypyc.irbuild.statement import transform_if_stmt
from mypyc.irbuild.statement import transform_import
from mypyc.irbuild.statement import transform_import_all
from mypyc.irbuild.statement import transform_import_from
from mypyc.irbuild.statement import transform_match_stmt
from mypyc.irbuild.statement import transform_operator_assignment_stmt
from mypyc.irbuild.statement import transform_raise_stmt
from mypyc.irbuild.statement import transform_return_stmt
from mypyc.irbuild.statement import transform_try_stmt
from mypyc.irbuild.statement import transform_while_stmt
from mypyc.irbuild.statement import transform_with_stmt
from mypyc.irbuild.statement import transform_yield_expr
from mypyc.irbuild.statement import transform_yield_from_expr


class IRBuilderVisitor(IRVisitor):
    """Mypy node visitor that dispatches to node transform implementations.

    This class should have no non-trivial logic.

    This visitor is separated from the rest of code to improve modularity and
    to avoid import cycles.

    This is based on the visitor pattern
    (https://en.wikipedia.org/wiki/Visitor_pattern).
    """

    # This gets passed to all the implementations and contains all the
    # state and many helpers. The attribute is initialized outside
    # this class since this class and IRBuilder form a reference loop.
    builder: IRBuilder

    def visit_mypy_file(self, mypyfile: MypyFile) -> None:
        assert False, "use transform_mypy_file instead"

    def visit_class_def(self, cdef: ClassDef) -> None:
        transform_class_def(self.builder, cdef)

    def visit_import(self, node: Import) -> None:
        transform_import(self.builder, node)

    def visit_import_from(self, node: ImportFrom) -> None:
        transform_import_from(self.builder, node)

    def visit_import_all(self, node: ImportAll) -> None:
        transform_import_all(self.builder, node)

    def visit_func_def(self, fdef: FuncDef) -> None:
        transform_func_def(self.builder, fdef)

    def visit_overloaded_func_def(self, o: OverloadedFuncDef) -> None:
        transform_overloaded_func_def(self.builder, o)

    def visit_decorator(self, dec: Decorator) -> None:
        transform_decorator(self.builder, dec)

    def visit_block(self, block: Block) -> None:
        transform_block(self.builder, block)

    # Statements

    def visit_expression_stmt(self, stmt: ExpressionStmt) -> None:
        transform_expression_stmt(self.builder, stmt)

    def visit_return_stmt(self, stmt: ReturnStmt) -> None:
        transform_return_stmt(self.builder, stmt)

    def visit_assignment_stmt(self, stmt: AssignmentStmt) -> None:
        transform_assignment_stmt(self.builder, stmt)

    def visit_operator_assignment_stmt(self, stmt: OperatorAssignmentStmt) -> None:
        transform_operator_assignment_stmt(self.builder, stmt)

    def visit_if_stmt(self, stmt: IfStmt) -> None:
        transform_if_stmt(self.builder, stmt)

    def visit_while_stmt(self, stmt: WhileStmt) -> None:
        transform_while_stmt(self.builder, stmt)

    def visit_for_stmt(self, stmt: ForStmt) -> None:
        transform_for_stmt(self.builder, stmt)

    def visit_break_stmt(self, stmt: BreakStmt) -> None:
        transform_break_stmt(self.builder, stmt)

    def visit_continue_stmt(self, stmt: ContinueStmt) -> None:
        transform_continue_stmt(self.builder, stmt)

    def visit_raise_stmt(self, stmt: RaiseStmt) -> None:
        transform_raise_stmt(self.builder, stmt)

    def visit_try_stmt(self, stmt: TryStmt) -> None:
        transform_try_stmt(self.builder, stmt)

    def visit_with_stmt(self, stmt: WithStmt) -> None:
        transform_with_stmt(self.builder, stmt)

    def visit_pass_stmt(self, stmt: PassStmt) -> None:
        pass

    def visit_assert_stmt(self, stmt: AssertStmt) -> None:
        transform_assert_stmt(self.builder, stmt)

    def visit_del_stmt(self, stmt: DelStmt) -> None:
        transform_del_stmt(self.builder, stmt)

    def visit_global_decl(self, stmt: GlobalDecl) -> None:
        # Pure declaration -- no runtime effect
        pass

    def visit_nonlocal_decl(self, stmt: NonlocalDecl) -> None:
        # Pure declaration -- no runtime effect
        pass

    def visit_match_stmt(self, stmt: MatchStmt) -> None:
        transform_match_stmt(self.builder, stmt)

    # Expressions

    def visit_name_expr(self, expr: NameExpr) -> Value:
        return transform_name_expr(self.builder, expr)

    def visit_member_expr(self, expr: MemberExpr) -> Value:
        return transform_member_expr(self.builder, expr)

    def visit_super_expr(self, expr: SuperExpr) -> Value:
        return transform_super_expr(self.builder, expr)

    def visit_call_expr(self, expr: CallExpr) -> Value:
        return transform_call_expr(self.builder, expr)

    def visit_unary_expr(self, expr: UnaryExpr) -> Value:
        return transform_unary_expr(self.builder, expr)

    def visit_op_expr(self, expr: OpExpr) -> Value:
        return transform_op_expr(self.builder, expr)

    def visit_index_expr(self, expr: IndexExpr) -> Value:
        return transform_index_expr(self.builder, expr)

    def visit_conditional_expr(self, expr: ConditionalExpr) -> Value:
        return transform_conditional_expr(self.builder, expr)

    def visit_comparison_expr(self, expr: ComparisonExpr) -> Value:
        return transform_comparison_expr(self.builder, expr)

    def visit_int_expr(self, expr: IntExpr) -> Value:
        return transform_int_expr(self.builder, expr)

    def visit_float_expr(self, expr: FloatExpr) -> Value:
        return transform_float_expr(self.builder, expr)

    def visit_complex_expr(self, expr: ComplexExpr) -> Value:
        return transform_complex_expr(self.builder, expr)

    def visit_str_expr(self, expr: StrExpr) -> Value:
        return transform_str_expr(self.builder, expr)

    def visit_bytes_expr(self, expr: BytesExpr) -> Value:
        return transform_bytes_expr(self.builder, expr)

    def visit_ellipsis(self, expr: EllipsisExpr) -> Value:
        return transform_ellipsis(self.builder, expr)

    def visit_list_expr(self, expr: ListExpr) -> Value:
        return transform_list_expr(self.builder, expr)

    def visit_tuple_expr(self, expr: TupleExpr) -> Value:
        return transform_tuple_expr(self.builder, expr)

    def visit_dict_expr(self, expr: DictExpr) -> Value:
        return transform_dict_expr(self.builder, expr)

    def visit_set_expr(self, expr: SetExpr) -> Value:
        return transform_set_expr(self.builder, expr)

    def visit_list_comprehension(self, expr: ListComprehension) -> Value:
        return transform_list_comprehension(self.builder, expr)

    def visit_set_comprehension(self, expr: SetComprehension) -> Value:
        return transform_set_comprehension(self.builder, expr)

    def visit_dictionary_comprehension(self, expr: DictionaryComprehension) -> Value:
        return transform_dictionary_comprehension(self.builder, expr)

    def visit_slice_expr(self, expr: SliceExpr) -> Value:
        return transform_slice_expr(self.builder, expr)

    def visit_generator_expr(self, expr: GeneratorExpr) -> Value:
        return transform_generator_expr(self.builder, expr)

    def visit_lambda_expr(self, expr: LambdaExpr) -> Value:
        return transform_lambda_expr(self.builder, expr)

    def visit_yield_expr(self, expr: YieldExpr) -> Value:
        return transform_yield_expr(self.builder, expr)

    def visit_yield_from_expr(self, o: YieldFromExpr) -> Value:
        return transform_yield_from_expr(self.builder, o)

    def visit_await_expr(self, o: AwaitExpr) -> Value:
        return transform_await_expr(self.builder, o)

    def visit_assignment_expr(self, o: AssignmentExpr) -> Value:
        return transform_assignment_expr(self.builder, o)

    # Constructs that shouldn't ever show up

    def visit_enum_call_expr(self, o: EnumCallExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit__promote_expr(self, o: PromoteExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_namedtuple_expr(self, o: NamedTupleExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_newtype_expr(self, o: NewTypeExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_temp_node(self, o: TempNode) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_type_alias_expr(self, o: TypeAliasExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_type_application(self, o: TypeApplication) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_type_var_expr(self, o: TypeVarExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_paramspec_expr(self, o: ParamSpecExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_type_var_tuple_expr(self, o: TypeVarTupleExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_typeddict_expr(self, o: TypedDictExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_reveal_expr(self, o: RevealExpr) -> Value:
        assert False, "can't compile analysis-only expressions"

    def visit_var(self, o: Var) -> None:
        assert False, "can't compile Var; should have been handled already?"

    def visit_cast_expr(self, o: CastExpr) -> Value:
        assert False, "CastExpr should have been handled in CallExpr"

    def visit_assert_type_expr(self, o: AssertTypeExpr) -> Value:
        assert False, "AssertTypeExpr should have been handled in CallExpr"

    def visit_star_expr(self, o: StarExpr) -> Value:
        assert False, "should have been handled in Tuple/List/Set/DictExpr or CallExpr"

    # Helpers

    def bail(self, msg: str, line: int) -> NoReturn:
        """Reports an error and aborts compilation up until the last accept() call

        (accept() catches the UnsupportedException and keeps on
        processing. This allows errors to be non-blocking without always
        needing to write handling for them.
        """
        self.builder.error(msg, line)
        raise UnsupportedException()
